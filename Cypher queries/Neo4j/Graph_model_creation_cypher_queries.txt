Neo4J Cypher queries:

0.⁠ ⁠(Optional) Clear the Database

MATCH (n)
DETACH DELETE n;
This ensures a fresh start. Run only if you truly want to remove all existing data.
 
1.⁠ ⁠Create Constraints

CREATE CONSTRAINT IF NOT EXISTS
FOR (c:Country) REQUIRE c.area_code IS UNIQUE;
CREATE CONSTRAINT IF NOT EXISTS
FOR (p:FoodProduct) REQUIRE p.item_code IS UNIQUE;
(Adjust syntax if on Neo4j 4.x or older.)
 
2.⁠ ⁠Create Year Nodes

MERGE (y2020:Year {year:2020});
MERGE (y2021:Year {year:2021});
MERGE (y2022:Year {year:2022});
MERGE (y2023:Year {year:2023});
 
3.⁠ ⁠Load Country & FoodProduct Nodes
3A. Load Countries (from trades.csv)

LOAD CSV WITH HEADERS FROM 'file:///trades.csv' AS row
MERGE (c:Country {
  area_code: toInteger(trim(row.reporter_area_code)),
  name: trim(row.reporter_area)
})
MERGE (c2:Country {
  area_code: toInteger(trim(row.partner_area_code)),
  name: trim(row.partner_area)
});

3B. Load FoodProduct Nodes (from trades.csv)

LOAD CSV WITH HEADERS FROM 'file:///trades.csv' AS row
MERGE (p:FoodProduct {
  item_code: toInteger(trim(row.item_code)),
  name: trim(row.item)
});

4.⁠ ⁠Create TradeLink Nodes for Each (Country, Product)

LOAD CSV WITH HEADERS FROM 'file:///food_balances.csv' AS row
MATCH (c:Country {area_code: toInteger(trim(row.area_code))})
MATCH (p:FoodProduct {item_code: toInteger(trim(row.item_code))})
MERGE (c)-[:HAS_TRADE_LINK]->(tl:TradeLink {
  countryId: c.area_code,
  productId: p.item_code
})
MERGE (tl)-[:FOR_PRODUCT]->(p);

5.⁠ ⁠Load Production, Consumption, Loss (from food_balances.csv)

LOAD CSV WITH HEADERS FROM 'file:///food_balances.csv' AS row
MATCH (c:Country {area_code: toInteger(trim(row.area_code))})
MATCH (p:FoodProduct {item_code: toInteger(trim(row.item_code))})
MATCH (tl:TradeLink {countryId: c.area_code, productId: p.item_code})
MATCH (y2020:Year {year:2020}),
      (y2021:Year {year:2021}),
      (y2022:Year {year:2022}),
      (y2023:Year {year:2023})

// Production
FOREACH (_ IN CASE WHEN trim(row.element) = "Production" THEN [1] ELSE [] END |
  CREATE (o20:Observation {type:"production", value: toFloat(trim(row.year_2020))})
  MERGE (o20)-[:OBSERVED_IN]->(y2020)
  MERGE (tl)-[:HAS_OBSERVATION]->(o20)

  CREATE (o21:Observation {type:"production", value: toFloat(trim(row.year_2021))})
  MERGE (o21)-[:OBSERVED_IN]->(y2021)
  MERGE (tl)-[:HAS_OBSERVATION]->(o21)

  CREATE (o22:Observation {type:"production", value: toFloat(trim(row.year_2022))})
  MERGE (o22)-[:OBSERVED_IN]->(y2022)
  MERGE (tl)-[:HAS_OBSERVATION]->(o22)

  CREATE (o23:Observation {type:"production", value: toFloat(trim(row.year_2023))})
  MERGE (o23)-[:OBSERVED_IN]->(y2023)
  MERGE (tl)-[:HAS_OBSERVATION]->(o23)
)

// Consumption
FOREACH (_ IN CASE WHEN trim(row.element) = "Consumption" THEN [1] ELSE [] END |
  CREATE (o20:Observation {type:"consumption", value: toFloat(trim(row.year_2020))})
  MERGE (o20)-[:OBSERVED_IN]->(y2020)
  MERGE (tl)-[:HAS_OBSERVATION]->(o20)

  CREATE (o21:Observation {type:"consumption", value: toFloat(trim(row.year_2021))})
  MERGE (o21)-[:OBSERVED_IN]->(y2021)
  MERGE (tl)-[:HAS_OBSERVATION]->(o21)

  CREATE (o22:Observation {type:"consumption", value: toFloat(trim(row.year_2022))})
  MERGE (o22)-[:OBSERVED_IN]->(y2022)
  MERGE (tl)-[:HAS_OBSERVATION]->(o22)

  CREATE (o23:Observation {type:"consumption", value: toFloat(trim(row.year_2023))})
  MERGE (o23)-[:OBSERVED_IN]->(y2023)
  MERGE (tl)-[:HAS_OBSERVATION]->(o23)
)

// Loss
FOREACH (_ IN CASE WHEN trim(row.element) = "Loss" THEN [1] ELSE [] END |
  CREATE (o20:Observation {type:"loss", value: toFloat(trim(row.year_2020))})
  MERGE (o20)-[:OBSERVED_IN]->(y2020)
  MERGE (tl)-[:HAS_OBSERVATION]->(o20)

  CREATE (o21:Observation {type:"loss", value: toFloat(trim(row.year_2021))})
  MERGE (o21)-[:OBSERVED_IN]->(y2021)
  MERGE (tl)-[:HAS_OBSERVATION]->(o21)

  CREATE (o22:Observation {type:"loss", value: toFloat(trim(row.year_2022))})
  MERGE (o22)-[:OBSERVED_IN]->(y2022)
  MERGE (tl)-[:HAS_OBSERVATION]->(o22)

  CREATE (o23:Observation {type:"loss", value: toFloat(trim(row.year_2023))})
  MERGE (o23)-[:OBSERVED_IN]->(y2023)
  MERGE (tl)-[:HAS_OBSERVATION]->(o23)
);

6.⁠ ⁠Load Price Data (from prices.csv)

LOAD CSV WITH HEADERS FROM 'file:///prices.csv' AS row
MATCH (c:Country {area_code: toInteger(trim(row.area_code))})
MATCH (p:FoodProduct {item_code: toInteger(trim(row.item_code))})
MATCH (tl:TradeLink {countryId: c.area_code, productId: p.item_code})
MATCH (y2020:Year {year:2020}),
      (y2021:Year {year:2021}),
      (y2022:Year {year:2022}),
      (y2023:Year {year:2023})

// For 2020
CREATE (o20:Observation {type:"price", value: toFloat(trim(row.year_2020))})
MERGE (o20)-[:OBSERVED_IN]->(y2020)
MERGE (tl)-[:HAS_OBSERVATION]->(o20)

// 2021
CREATE (o21:Observation {type:"price", value: toFloat(trim(row.year_2021))})
MERGE (o21)-[:OBSERVED_IN]->(y2021)
MERGE (tl)-[:HAS_OBSERVATION]->(o21)

// 2022
CREATE (o22:Observation {type:"price", value: toFloat(trim(row.year_2022))})
MERGE (o22)-[:OBSERVED_IN]->(y2022)
MERGE (tl)-[:HAS_OBSERVATION]->(o22)

// 2023
CREATE (o23:Observation {type:"price", value: toFloat(trim(row.year_2023))})
MERGE (o23)-[:OBSERVED_IN]->(y2023)
MERGE (tl)-[:HAS_OBSERVATION]->(o23);
 
7.⁠ ⁠Load Country-to-Country Exports (Optional)

LOAD CSV WITH HEADERS FROM 'file:///trades.csv' AS row
MATCH (exporter:Country {area_code: toInteger(trim(row.reporter_area_code))})
MATCH (importer:Country {area_code: toInteger(trim(row.partner_area_code))})
MERGE (exporter)-[r:TRADES {product_code: toInteger(trim(row.item_code))}]->(importer)
SET
  r.product_name = trim(row.item),
  r.export_2020 = toFloat(trim(row.year_2020)),
  r.export_2021 = toFloat(trim(row.year_2021)),
  r.export_2022 = toFloat(trim(row.year_2022)),
  r.export_2023 = toFloat(trim(row.year_2023)),
  r.unit = trim(row.unit);
